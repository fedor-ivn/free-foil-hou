-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from ParSyntax.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pTerm -> Term                               (0)
	%start_pTerm1 -> Term1                             (1)
	%start_pTerm2 -> Term2                             (2)
	MetaVarId -> L_MetaVarId                           (3)
	ConsId -> L_ConsId                                 (4)
	VarId -> L_VarId                                   (5)
	Term -> 'λ' VarId '.' Term1                        (6)
	Term1 -> Term1 Term2                               (7)
	Term2 -> VarId                                     (8)
	Term2 -> MetaVarId                                 (9)
	Term2 -> ConsId                                    (10)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'.'            { PT _ (TS _ 1) }
	'λ'            { PT _ (TS _ 2) }
	L_MetaVarId    { PT _ (T_MetaVarId $$) }
	L_ConsId       { PT _ (T_ConsId $$) }
	L_VarId        { PT _ (T_VarId $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pTerm    rule  0
	%start_pTerm1   rule  1
	%start_pTerm2   rule  2
	MetaVarId       rule  3
	ConsId          rule  4
	VarId           rule  5
	Term            rule  6
	Term1           rule  7
	Term2           rules 8, 9, 10

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pTerm -> . Term                              (rule 0)

	'λ'            shift, and enter state 13

	Term           goto state 12

State 1

	%start_pTerm1 -> . Term1                            (rule 1)


	Term1          goto state 11

State 2

	%start_pTerm2 -> . Term2                            (rule 2)

	L_MetaVarId    shift, and enter state 4
	L_ConsId       shift, and enter state 9
	L_VarId        shift, and enter state 10

	MetaVarId      goto state 5
	ConsId         goto state 6
	VarId          goto state 7
	Term2          goto state 8

State 3

	MetaVarId -> . L_MetaVarId                          (rule 3)

	L_MetaVarId    shift, and enter state 4


State 4

	MetaVarId -> L_MetaVarId .                          (rule 3)

	L_MetaVarId    reduce using rule 3
	L_ConsId       reduce using rule 3
	L_VarId        reduce using rule 3
	%eof           reduce using rule 3


State 5

	Term2 -> MetaVarId .                                (rule 9)

	L_MetaVarId    reduce using rule 9
	L_ConsId       reduce using rule 9
	L_VarId        reduce using rule 9
	%eof           reduce using rule 9


State 6

	Term2 -> ConsId .                                   (rule 10)

	L_MetaVarId    reduce using rule 10
	L_ConsId       reduce using rule 10
	L_VarId        reduce using rule 10
	%eof           reduce using rule 10


State 7

	Term2 -> VarId .                                    (rule 8)

	L_MetaVarId    reduce using rule 8
	L_ConsId       reduce using rule 8
	L_VarId        reduce using rule 8
	%eof           reduce using rule 8


State 8

	%start_pTerm2 -> Term2 .                            (rule 2)

	%eof           accept


State 9

	ConsId -> L_ConsId .                                (rule 4)

	L_MetaVarId    reduce using rule 4
	L_ConsId       reduce using rule 4
	L_VarId        reduce using rule 4
	%eof           reduce using rule 4


State 10

	VarId -> L_VarId .                                  (rule 5)

	'.'            reduce using rule 5
	L_MetaVarId    reduce using rule 5
	L_ConsId       reduce using rule 5
	L_VarId        reduce using rule 5
	%eof           reduce using rule 5


State 11

	%start_pTerm1 -> Term1 .                            (rule 1)
	Term1 -> Term1 . Term2                              (rule 7)

	L_MetaVarId    shift, and enter state 4
	L_ConsId       shift, and enter state 9
	L_VarId        shift, and enter state 10
	%eof           accept

	MetaVarId      goto state 5
	ConsId         goto state 6
	VarId          goto state 7
	Term2          goto state 15

State 12

	%start_pTerm -> Term .                              (rule 0)

	%eof           accept


State 13

	Term -> 'λ' . VarId '.' Term1                       (rule 6)

	L_VarId        shift, and enter state 10

	VarId          goto state 14

State 14

	Term -> 'λ' VarId . '.' Term1                       (rule 6)

	'.'            shift, and enter state 16


State 15

	Term1 -> Term1 Term2 .                              (rule 7)

	L_MetaVarId    reduce using rule 7
	L_ConsId       reduce using rule 7
	L_VarId        reduce using rule 7
	%eof           reduce using rule 7


State 16

	Term -> 'λ' VarId '.' . Term1                       (rule 6)


	Term1          goto state 17

State 17

	Term -> 'λ' VarId '.' Term1 .                       (rule 6)
	Term1 -> Term1 . Term2                              (rule 7)

	L_MetaVarId    shift, and enter state 4
	L_ConsId       shift, and enter state 9
	L_VarId        shift, and enter state 10
	%eof           reduce using rule 6

	MetaVarId      goto state 5
	ConsId         goto state 6
	VarId          goto state 7
	Term2          goto state 15

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 11
Number of terminals: 5
Number of non-terminals: 9
Number of states: 18
