-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelSyntax where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsSyntax

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transMetaVarId :: AbsSyntax.MetaVarId -> Result
transMetaVarId x = case x of
  AbsSyntax.MetaVarId string -> failure x

transConsId :: AbsSyntax.ConsId -> Result
transConsId x = case x of
  AbsSyntax.ConsId string -> failure x

transVarId :: AbsSyntax.VarId -> Result
transVarId x = case x of
  AbsSyntax.VarId string -> failure x

transTerm :: AbsSyntax.Term -> Result
transTerm x = case x of
  AbsSyntax.Lam varid term -> failure x
  AbsSyntax.App term1 term2 -> failure x
  AbsSyntax.Var varid -> failure x
  AbsSyntax.MetaVar metavarid -> failure x
  AbsSyntax.Cons consid -> failure x
