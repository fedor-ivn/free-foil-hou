-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Language.Lambda.FCU.FCUSyntax.Par where
import Language.Lambda.FCU.FCUSyntax.Abs
import Language.Lambda.FCU.FCUSyntax.Lex
import Language.Lambda.FCU.FCUSyntax.ErrM

}

%name pTerm Term
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  ':.:' { PT _ (TS _ 3) }
  ':@' { PT _ (TS _ 4) }
  L_Id { PT _ (T_Id $$) }
  L_MetavarId { PT _ (T_MetavarId $$) }
  L_ConstructorId { PT _ (T_ConstructorId $$) }

%%

Id :: { Id}
Id  : L_Id { Id ($1)}

MetavarId :: { MetavarId}
MetavarId  : L_MetavarId { MetavarId ($1)}

ConstructorId :: { ConstructorId}
ConstructorId  : L_ConstructorId { ConstructorId ($1)}

Term :: { Term }
Term : MetavarId { Language.Lambda.FCU.FCUSyntax.Abs.WTerm $1 }
     | Id { Language.Lambda.FCU.FCUSyntax.Abs.OTerm $1 }
     | ConstructorId { Language.Lambda.FCU.FCUSyntax.Abs.CTerm $1 }
     | Term ':@' Term { Language.Lambda.FCU.FCUSyntax.Abs.AppTerm $1 $3 }
     | Id ':.:' Term { Language.Lambda.FCU.FCUSyntax.Abs.AbsTerm $1 $3 }
     | '(' Term ')' { $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

