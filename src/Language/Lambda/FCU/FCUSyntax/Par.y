-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Language.Lambda.FCUSyntax.Par where
import Language.Lambda.FCUSyntax.Abs
import Language.Lambda.FCUSyntax.Lex
import Language.Lambda.FCUSyntax.ErrM

}

%name pProgram Program
%name pCommand Command
%name pListCommand ListCommand
%name pTerm Term
%name pTerm1 Term1
%name pTerm2 Term2
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '.' { PT _ (TS _ 3) }
  ';' { PT _ (TS _ 4) }
  'compute' { PT _ (TS _ 5) }
  'λ' { PT _ (TS _ 6) }
  L_VarIdent { PT _ (T_VarIdent $$) }
  L_MetaVarIdent { PT _ (T_MetaVarIdent $$) }
  L_Id { PT _ (T_Id $$) }

%%

VarIdent :: { VarIdent}
VarIdent  : L_VarIdent { VarIdent ($1)}

MetaVarIdent :: { MetaVarIdent}
MetaVarIdent  : L_MetaVarIdent { MetaVarIdent ($1)}

Id :: { Id}
Id  : L_Id { Id ($1)}

Program :: { Program }
Program : ListCommand { Language.Lambda.FCUSyntax.Abs.AProgram (reverse $1) }
Command :: { Command }
Command : 'compute' Term { Language.Lambda.FCUSyntax.Abs.CommandCompute $2 }
ListCommand :: { [Command] }
ListCommand : {- empty -} { [] }
            | ListCommand Command ';' { flip (:) $1 $2 }
Term :: { Term }
Term : 'λ' Id '.' Term { Language.Lambda.FCUSyntax.Abs.Lam $2 $4 }
     | Term1 { $1 }
Term1 :: { Term }
Term1 : Term1 Term2 { Language.Lambda.FCUSyntax.Abs.App $1 $2 }
      | Term2 { $1 }
Term2 :: { Term }
Term2 : VarIdent { Language.Lambda.FCUSyntax.Abs.Var $1 }
      | MetaVarIdent { Language.Lambda.FCUSyntax.Abs.MetaVar $1 }
      | '(' Term ')' { $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

