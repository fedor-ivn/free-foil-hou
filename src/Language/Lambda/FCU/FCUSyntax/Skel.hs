-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.Lambda.FCU.FCUSyntax.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.Lambda.FCU.FCUSyntax.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: Language.Lambda.FCU.FCUSyntax.Abs.Id -> Result
transId x = case x of
  Language.Lambda.FCU.FCUSyntax.Abs.Id string -> failure x

transMetavarId :: Language.Lambda.FCU.FCUSyntax.Abs.MetavarId -> Result
transMetavarId x = case x of
  Language.Lambda.FCU.FCUSyntax.Abs.MetavarId string -> failure x

transConstructorId :: Language.Lambda.FCU.FCUSyntax.Abs.ConstructorId -> Result
transConstructorId x = case x of
  Language.Lambda.FCU.FCUSyntax.Abs.ConstructorId string -> failure x

transTerm :: Language.Lambda.FCU.FCUSyntax.Abs.Term -> Result
transTerm x = case x of
  Language.Lambda.FCU.FCUSyntax.Abs.WTerm metavarid -> failure x
  Language.Lambda.FCU.FCUSyntax.Abs.OTerm id -> failure x
  Language.Lambda.FCU.FCUSyntax.Abs.CTerm constructorid -> failure x
  Language.Lambda.FCU.FCUSyntax.Abs.AppTerm term1 term2 -> failure x
  Language.Lambda.FCU.FCUSyntax.Abs.AbsTerm pattern_ scopedterm -> failure x
  Language.Lambda.FCU.FCUSyntax.Abs.PairTerm term1 term2 -> failure x

transPattern :: Language.Lambda.FCU.FCUSyntax.Abs.Pattern -> Result
transPattern x = case x of
  Language.Lambda.FCU.FCUSyntax.Abs.PatternVar id -> failure x

transScopedTerm :: Language.Lambda.FCU.FCUSyntax.Abs.ScopedTerm -> Result
transScopedTerm x = case x of
  Language.Lambda.FCU.FCUSyntax.Abs.ScopedTerm term -> failure x
